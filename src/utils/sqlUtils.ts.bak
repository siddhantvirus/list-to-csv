/**
 * Shared SQL utility functions for the List to CSV extension
 */

/**
 * Format SQL value based on its content and dialect
 * @param value The value to format
 * @param inferDataTypes Whether to infer data types
 * @param dialect The SQL dialect
 * @returns The formatted SQL value
 */
export function formatSqlValue(value: string, inferDataTypes: boolean, dialect: string): string {
    if (!value || value.trim() === '') {
        return 'NULL';
    }
    
    // Try to convert to number
    const num = Number(value);
    if (!isNaN(num) && inferDataTypes) {
        return value;
    }
    const pipeCount = (line.match(/\|/g) || []).length;
    const multiSpaceCount = (line.match(/\s{2,}/g) || []).length;
    
    // Choose the separator with the most occurrences
    if (tabCount > 0) {
        return '\t'; // Tab has highest priority if present
    } else if (commaCount > 0) {
        return ',';  // Comma is very common for CSV data
    } else if (pipeCount > 0) {
        return '|';  // Pipe for markdown tables
    } else if (multiSpaceCount > 0) {
        return ' '; // Space for space-aligned data (use a single space as marker)
    }
    
    return null;
}rmat
 * @param inferDataTypes Whether to infer data types
 * @param dialect The SQL dialect
 * @returns The formatted SQL value
 */
export function formatSqlValue(value: string, inferDataTypes: boolean, dialect: string): string {
    if (!value || value.trim() === '') {
        return 'NULL';
    }
    
    // Try to convert to number
    const num = Number(value);
    if (!isNaN(num) && inferDataTypes) {
        return value;
    }
    
    // Check for date patterns
    const datePattern = /^\d{4}[-/]\d{1,2}[-/]\d{1,2}$/;
    const timestampPattern = /^\d{4}[-/]\d{1,2}[-/]\d{1,2}[T\s]\d{1,2}:\d{1,2}(:\d{1,2})?$/;
    
    if ((datePattern.test(value) || timestampPattern.test(value)) && inferDataTypes) {
        if (dialect === 'spark') {
            return `'${value}'`;
        } else if (dialect === 'mssql') {
            return `'${value}'`;
        } else {
            return `'${value}'`;
        }
    }
    
    // Escape single quotes
    const escaped = value.replace(/'/g, "''");
    return `'${escaped}'`;
}

/**
 * Get default data type for a SQL dialect
 * @param dialect The SQL dialect
 * @returns The default data type for the dialect
 */
export function getDefaultDataType(dialect: string): string {
    switch (dialect) {
        case 'mssql': return 'VARCHAR(255)';
        case 'mysql': return 'VARCHAR(255)';
        case 'postgres': return 'VARCHAR(255)';
        case 'spark': return 'STRING';
        default: return 'VARCHAR(255)';
    }
}

/**
 * Infer SQL data type based on sample data
 * @param sampleData Sample data rows
 * @param columnIndex Column index to check
 * @param dialect SQL dialect
 * @returns Inferred SQL data type
 */
export function inferSqlDataType(sampleData: string[][], columnIndex: number, dialect: string): string {
    // Check sample values to infer the data type
    const sampleValues = sampleData
        .map(row => columnIndex < row.length ? row[columnIndex] : '')
        .filter(value => value !== null && value !== undefined && value.trim() !== '');
    
    if (sampleValues.length === 0) {
        return getDefaultDataType(dialect);
    }

    // Check if all values are numeric
    let allNumbers = true;
    let allIntegers = true;
    let maxLength = 0;
    
    for (const value of sampleValues) {
        // Update max text length
        maxLength = Math.max(maxLength, value.length);
        
        // Check if can be parsed as a number
        const num = Number(value);
        if (isNaN(num)) {
            allNumbers = false;
            allIntegers = false;
        } else if (!Number.isInteger(num)) {
            allIntegers = false;
        }
        
        // Stop checking numbers if we already know it's not all numbers
        if (!allNumbers) {
            break;
        }
    }
    
    // Check for date patterns
    const datePattern = /^\d{4}[-/]\d{1,2}[-/]\d{1,2}$/;
    const allDates = sampleValues.every(value => datePattern.test(value));
    
    // Timestamp pattern (date with time)
    const timestampPattern = /^\d{4}[-/]\d{1,2}[-/]\d{1,2}[T\s]\d{1,2}:\d{1,2}(:\d{1,2})?$/;
    const allTimestamps = sampleValues.every(value => timestampPattern.test(value));
    
    // Determine data type based on dialect
    switch (dialect) {
        case 'mssql':
            if (allTimestamps) { return 'DATETIME'; }
            if (allDates) { return 'DATE'; }
            if (allIntegers) { return 'INT'; }
            if (allNumbers) { return 'FLOAT'; }
            if (maxLength <= 255) { return `VARCHAR(255)`; }
            return 'TEXT';
            
        case 'mysql':
            if (allTimestamps) { return 'DATETIME'; }
            if (allDates) { return 'DATE'; }
            if (allIntegers) { return 'INT'; }
            if (allNumbers) { return 'FLOAT'; }
            if (maxLength <= 255) { return `VARCHAR(255)`; }
            return 'TEXT';
            
        case 'postgres':
            if (allTimestamps) { return 'TIMESTAMP'; }
            if (allDates) { return 'DATE'; }
            if (allIntegers) { return 'INTEGER'; }
            if (allNumbers) { return 'DECIMAL'; }
            if (maxLength <= 255) { return `VARCHAR(255)`; }
            return 'TEXT';
            
        case 'spark':
            if (allTimestamps) { return 'TIMESTAMP'; }
            if (allDates) { return 'DATE'; }
            if (allIntegers) { return 'INT'; }
            if (allNumbers) { return 'DOUBLE'; }
            return 'STRING';
    }
    
    return getDefaultDataType(dialect);
}

/**
 * Detect the separator used in data
 * @param line A sample line to check for separators
 * @returns The detected separator or null if none is found
 */
export function detectSeparator(line: string): string | null {
    if (!line) {
        return null;
    }
    
    // Count occurrences of each separator
    const tabCount = (line.match(/\t/g) || []).length;
    const commaCount = (line.match(/,/g) || []).length;
    const pipeCount = (line.match(/\|/g) || []).length;
    const multiSpaceCount = (line.match(/\s{2,}/g) || []).length;
    
    // Choose the separator with the most occurrences
    if (tabCount > 0) {
        return '\t'; // Tab has highest priority if present
    } else if (commaCount > 0) {
        return ',';  // Comma is very common for CSV data
    } else if (pipeCount > 0) {
        return '|';  // Pipe for markdown tables
    } else if (multiSpaceCount > 0) {
        return ' '; // Space for space-aligned data (use a single space as marker)
    }
    
    return null;
}
